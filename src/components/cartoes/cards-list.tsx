\'use client\';\n\nimport { useState, useEffect } from \'react\';\nimport { db } from \'@/lib/firebase\';\nimport { collection, query, where, onSnapshot } from \'firebase/firestore\';\nimport { useAuth } from \'@/hooks/use-auth\';\nimport { useProfile } from \'@/hooks/use-profile\';\nimport { type Card } from \'@/lib/types\';\nimport { Button } from \'@/components/ui/button\';\nimport { PlusCircle } from \'lucide-react\';\nimport { text } from \'@/lib/strings\';\nimport CardForm from \'./add-card-form\';\nimport CardActionsMenu from \'./card-actions-menu\';\n\nexport default function CardsList() {\n  const { user } = useAuth();\n  const { activeProfile } = useProfile();\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [cardToEdit, setCardToEdit] = useState<Card | null>(null);\n\n  useEffect(() => {\n    if (!user || !activeProfile) {\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    const q = query(\n      collection(db, \'cards\'),\n      where(\'userId\', \'==\', user.uid),\n      where(\'profile\', \'==\', activeProfile)\n    );\n\n    const unsubscribe = onSnapshot(\n      q,\n      (querySnapshot) => {\n        const userCards = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Card[];\n        setCards(userCards);\n        setLoading(false);\n      },\n      (error) => {\n        console.error(\'Error fetching cards: \', error);\n        setLoading(false);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [user, activeProfile]);\n\n  const handleAddClick = () => {\n    setCardToEdit(null);\n    setIsFormOpen(true);\n  };\n\n  const handleEditClick = (card: Card) => {\n    setCardToEdit(card);\n    setIsFormOpen(true);\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-end mb-4\">\n        <Button onClick={handleAddClick}>\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          {text.addCardForm.title}\n        </Button>\n      </div>\n      {loading ? (\n        <p>Carregando cartões...</p>\n      ) : cards.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {cards.map((card) => (\n            <div\n              key={card.id}\n              className=\"border p-4 rounded-lg shadow-sm relative\"\n            >\n              <div className=\"absolute top-1 right-1\">\n                <CardActionsMenu card={card} onEdit={() => handleEditClick(card)} />\n              </div>\n              <h3 className=\"text-lg font-semibold pr-8\">{card.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Limite:{\' \}\n                {card.limit.toLocaleString(\'pt-BR\', {\n                  style: \'currency\',\n                  currency: \'BRL\',\n                })}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                Fecha dia: {card.closingDay}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                Vence dia: {card.dueDay}\n              </p>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-10\">\n          <p>Nenhum cartão cadastrado ainda.</p>\n        </div>\n      )}\n      <CardForm\n        isOpen={isFormOpen}\n        onOpenChange={setIsFormOpen}\n        cardToEdit={cardToEdit}\n      />\n    </div>\n  );\n}\n